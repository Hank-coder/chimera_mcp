[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project]
name = "personal-ai-memory"
version = "0.1.0"
description = "Personal AI Memory System - Project Chimera"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Hank", email = "your-email@example.com"},
]
license = {text = "MIT"}
keywords = ["ai", "memory", "notion", "neo4j", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # 核心框架
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "loguru>=0.7.0",
    
    # 数据库和图数据库
    "graphiti-core>=0.3.0",
    "neo4j>=5.15.0",
    
    # Notion API
    "notion-client>=2.2.1",
    
    # MCP 框架
    "mcp>=1.0.0",
    "fastmcp>=0.2.0",
    
    # HTTP 客户端
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    
    # AI/LLM 相关
    "google-generativeai>=0.3.0",
    "google-genai>=1.25.0",
    "openai>=1.3.0",
    "langchain>=0.3.26",
    "langchain-google-genai>=2.0.10",
    "tiktoken>=0.5.0",
    
    # 机器学习
    "numpy>=1.21.0,<2.0.0",
    "scikit-learn>=1.3.0",
    
    # 文档处理
    "PyPDF2>=3.0.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    "aiofiles>=24.1.0",
    
    # 工具库
    "asyncio-throttle>=1.0.2",
    "schedule>=1.2.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project.urls]
"Homepage" = "https://github.com/your-username/personal-ai-memory"
"Bug Tracker" = "https://github.com/your-username/personal-ai-memory/issues"

[project.scripts]
chimera-sync = "run_chimera:main"
chimera-mcp = "fastmcp_server:main"
chimera-setup = "scripts.setup_database:main"
chimera-health = "scripts.health_check:main"

[tool.hatch.build.targets.wheel]
packages = ["config", "core", "sync_service", "mcp_server", "utils", "scripts"]

[tool.hatch.version]
path = "core/__init__.py"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
